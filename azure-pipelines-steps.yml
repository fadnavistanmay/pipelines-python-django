steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: 3.5
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

- task: CacheBeta@1
  inputs:
    key: $(CACHE_KEY)
    path: $(PYTHONPATH)
    cacheHitVar: CACHE_RESTORED
  displayName: Cache packages

- script: set PATH=%PATH%; C:\hostedtoolcache\windows\Python\3.5.4\x64; C:\hostedtoolcache\windows\Python\3.5.4\x64\Scripts; C:\Users\VssAdministrator\AppData\Roaming\Python\Python35\Scripts
  condition: eq(variable.Agent.OS,'Windows_NT')
  
- script: |
    #python -m pip install --upgrade pip setuptools wheel django
    #pip install --user
    pip install --target=$(PYTHONPATH) -r requirements.txt
    #pip install unittest-xml-reporting
  displayName: 'Install prerequisites'
  condition: ne(variables.CACHE_RESTORED, 'true')

- script: |
    pushd '$(projectRoot)'
    python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
  condition: succeededOrFailed()
  displayName: 'Run tests'

- script: |
    ls -l $(PYTHONPATH)

- script: python -c 'help("xmlrunner")'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: "**/TEST-*.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'